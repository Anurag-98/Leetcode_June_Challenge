class RandomizedSet {
    
    public:
    /** Initialize your data structure here. */
    
    //Using unordered map, as it has O(1) time complexity for:
    //     1) Insertion
    //     2) Deletion
    //     3) Search
    unordered_map<int,bool> map;
    
    // A variable that wil keep a track of total elements in map 
    int num_of_elements;
    
    //Initialsing num of elements with 0 in this constructor!
    RandomizedSet() {
        num_of_elements = 0;
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        
        // ".count()" checks wether the value is already present or not
        //-->(It returns true if element is present, otherwise false)
        
        //If element is already present, return false
        if(map.count(val)){
            return false;
        }
        
        //If element is not present, then:
        //   1)Insert in map
        map[val] = true;
        //    2) Increase the count of elements by 1
        num_of_elements++;
        //     3) Finally return true!
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        
        
        if(map.count(val)){
            // ".erase()" deletes the element with specified key from map in O(1)
            map.erase(val);
            // As one element is removed from map, decrease the count of elements by 1
            num_of_elements--;
            return true;
            
        }
        
        // If element that has to be removed is not present, return false!
        return false;
    }
    
    /** Get a random element from the set. */
    
    
    int getRandom() {
        
        // rand() will generate a random value, between (0 to num_of_elements-1)
        int random_index = rand() % num_of_elements;
        
        // Syntax for iterator of map, pointing to first element in map
        unordered_map<int,bool>:: iterator it = map.begin();
        
        //Now we have to jump to that random position element from start
        //--> (so we cannot simply add position in iterator)
        // Thus using this In-built function "advance()", which will move our iterator to that position
        advance(it,random_index);
        
        /*  Note:
                We could also have used In-built function next for moving iterator like:
                it = next(it,random_index); 
        */
        
        //returning the key value of map's element where this iterator was pointing to.
        /*
          Note 2:
                iterator holds the adress of that position, Now for accessiing key and value:
                1) To get the key use :   it->first;
                2) To get the value use : it->second;
        */
        return it->first;
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */